package br.com.jardelnovaes.taxbr.services.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.Join;
import javax.persistence.criteria.Order;

import br.com.jardelnovaes.taxbr.models.AddressState;
import br.com.jardelnovaes.taxbr.models.Company;
import br.com.jardelnovaes.taxbr.models.Operation;
import br.com.jardelnovaes.taxbr.models.PersonType;
import br.com.jardelnovaes.taxbr.models.TaxRule;
import br.com.jardelnovaes.taxbr.models.TransactionType;
import br.com.jardelnovaes.taxbr.services.QueryTypeFindTaxRuleEnum;
import br.com.jardelnovaes.taxbr.services.TaxRuleService;

public class TaxRuleServiceImpl extends GenericServiceImpl<TaxRule> implements TaxRuleService{

	public TaxRule findRule(String fromState, String toState, Long transactionType, Long operation,
			Long personType, String ncm, Integer exNCM, String cest, Integer itemId,
			Long companyId) throws Exception {
		
		return findRule(fromState, toState, transactionType, operation, personType, ncm, exNCM, cest, itemId, companyId, false);
	}
	
	public TaxRule findRule(String fromState, String toState, Long transactionType, Long operation,
			Long personType, String ncm, Integer exNCM, String cest, Integer itemId,
			Long companyId, boolean isShowInactives) throws Exception {
		return findRule(fromState, toState, transactionType, operation, personType, ncm, exNCM, cest, itemId, companyId, isShowInactives, QueryTypeFindTaxRuleEnum.AllTaxes);
	}
	
	public TaxRule findRule(String fromState, String toState, Long transactionType, Long operation,
							Long personType, String ncm, Integer exNCM, String cest, Integer itemId,
							Long companyId, boolean isShowInactives, QueryTypeFindTaxRuleEnum queryType) throws Exception {
		
		TaxRule taxRuleFilter = new TaxRule();
		
		taxRuleFilter.setFromState(new AddressState(fromState));
		taxRuleFilter.setToState(new AddressState(toState));
		
		if((transactionType != null) && (transactionType > 0))
			taxRuleFilter.setTransactionType(new TransactionType(transactionType));
		
		if((operation != null) && (operation > 0))
			taxRuleFilter.setOperation(new Operation(operation));
		
		if((personType != null) && (personType > 0))
			taxRuleFilter.setPersonType(new PersonType(personType));
		
		
		taxRuleFilter.setNCM(ncm);
		
		if((exNCM != null) && (exNCM > 0))
			taxRuleFilter.setExNCM(exNCM);
		
		taxRuleFilter.setCEST(cest);
		
		if((itemId != null) && (itemId > 0))
			taxRuleFilter.setItemId(itemId);
	
		if((companyId != null) && (companyId > 0))
			taxRuleFilter.setCompany(new Company(companyId));
		
		return findRule(taxRuleFilter, isShowInactives, queryType);
	}
	
	public TaxRule findRule(TaxRule taxRuleFilterOptions) throws Exception {
		return findRule(taxRuleFilterOptions, false);
	}
	
	public TaxRule findRule(TaxRule taxRuleFilterOptions, boolean isShowInactives) throws Exception {
		return findRule(taxRuleFilterOptions, isShowInactives, QueryTypeFindTaxRuleEnum.AllTaxes);
	}
	
	public TaxRule findRule(TaxRule taxRuleFilterOptions, boolean isShowInactives, QueryTypeFindTaxRuleEnum queryType) throws Exception {	
		
		validateFilters(taxRuleFilterOptions);
		//TODO Tratar active = false aqui?
		
		dao.createEntityCriteria();
		
		dao.getDaoCriterea().joinWithEqual(
				dao.getDaoCriterea().join("fromState"), 
				"id", taxRuleFilterOptions.getFromState().getId());
		
		dao.getDaoCriterea().joinWithEqual(
				dao.getDaoCriterea().join("toState"), 
				"id", taxRuleFilterOptions.getToState().getId());
		
		if((taxRuleFilterOptions.getTransactionType() != null) && (taxRuleFilterOptions.getTransactionType().getId() != 0)){
			dao.getDaoCriterea().joinWithOn(
					dao.getDaoCriterea().leftJoin("transactionType"), 
					"id", taxRuleFilterOptions.getTransactionType().getId());			
		}
		
		if((taxRuleFilterOptions.getOperation() != null) && (taxRuleFilterOptions.getOperation().getId() != 0)){
			dao.getDaoCriterea().joinWithOn(
					dao.getDaoCriterea().leftJoin("operation"), 
					"id", taxRuleFilterOptions.getOperation().getId());
		}
		
		if((taxRuleFilterOptions.getPersonType() != null) && (taxRuleFilterOptions.getPersonType().getId() != 0)){
			dao.getDaoCriterea().joinWithOn(
					dao.getDaoCriterea().leftJoin("personType"), 
					"id", taxRuleFilterOptions.getPersonType().getId());
		}
				
		if((taxRuleFilterOptions.getNCM() != null) && (!taxRuleFilterOptions.getNCM().isEmpty())){
			dao.getDaoCriterea().equal("NCM", taxRuleFilterOptions.getNCM());
		}
		
		if(taxRuleFilterOptions.getExNCM() != 0){
			dao.getDaoCriterea().equal("ExNCM", taxRuleFilterOptions.getExNCM());
		}
		
		if((taxRuleFilterOptions.getCEST() != null) && (!taxRuleFilterOptions.getCEST().isEmpty())){
			dao.getDaoCriterea().equal("CEST", taxRuleFilterOptions.getCEST());
		}
		
		if(taxRuleFilterOptions.getItemId() != 0){
			dao.getDaoCriterea().equal("itemId", taxRuleFilterOptions.getItemId());
		}
			
		/*
		if((companyId != null) && (companyId > 0))
			taxRuleFilter.setCompany(new Company(companyId));
		*/
		
		if(!isShowInactives){
			dao.getDaoCriterea().equal("active", true);
		}
		
		//TODO Tratar o order BY
		List<Order> order = new ArrayList<Order>();
		//order.add(
		//dao.getDaoCriterea().orderBy()
		
		TaxRule ret = dao.getFirst();		
		
		if(ret == null)
			ret = new TaxRule();
		
		switch (queryType) {
			case OnlyICMS:
				ret.setTaxRulePISCOFINS(null);
				break;
			case OnlyPISCOFINS:
				ret.setTaxRuleICMS(null);
				break;	
			default:
				break;
		}
		return ret;
	}
	
	private void validateFilters(TaxRule taxRuleFilterOptions) throws Exception {
		if ((taxRuleFilterOptions.getFromState() == null) || (taxRuleFilterOptions.getFromState().getId().isEmpty())){
			throw new Exception("From State Required Filter wasn't defined!");
		}
		
		if ((taxRuleFilterOptions.getToState() == null) || (taxRuleFilterOptions.getToState().getId().isEmpty())){
			throw new Exception("To State Required Filter wasn't defined!");
		}
	}
}
