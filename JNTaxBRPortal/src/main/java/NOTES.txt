Alterar os dados de conexão do banco em:
	JNTaxBRPortal/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml

[REST TaxRule]
ARRUMAR BUGS !!!!!!!!!!!!!
Mexi na DaoCriteria e não está mais aplicando os WHERE / AND / Etc.

Verificar como usar @ModelAttribute, o teste de REST Full não está funcionando.
http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/#csrf-include-csrf-token-ajax
http://localhost:9095/JNTaxBRPortal/rest/taxRules/getTaxRule?fromState=SC&toState=PR&transactionType=1
http://localhost:9095/JNTaxBRPortal/rest/taxRules/getTaxRule?fromState=SC&toState=SC&queryType=AllTaxes&transactionType=1
{"taxRuleFilterOptions":{"id":0,"fromState":"SC","toState":"PR","active":true,"transactionType":null,"operation":null,"personType":null,"itemId":0,"taxRulePISCOFINS":null,"taxRuleICMS":null,"ncm":null,"exNCM":0,"cest":null}}

http://stackoverflow.com/questions/26905047/condition-left-join-in-criteriaquery
https://github.com/FasterXML/jackson-datatype-hibernate/blob/master/README.md

[WEB Services WSDL]
http://www.matera.com/br/2014/02/13/web-services-usando-maven-spring-e-jaxb-parte-3/
http://briansjavablog.blogspot.com.br/2013/01/spring-web-services-tutorial.html
http://docs.spring.io/spring-ws/sites/1.5/reference/html/server.html#server-automatic-wsdl-exposure
http://howtodoinjava.com/spring/spring-restful/spring-restful-client-resttemplate-example/
	

[Tratar campos "Active"]
[Criar conceito por empresa]
AppUser não deve ser AbstractByCompany porque dele é que vem a companyId.
Revisar como será a regra par definir qual é a empresa.
ByCompany Entities: Operation, PersonType, TransactionType, TaxRule*

[Implementar Spring Security]
http://websystique.com/spring-security-tutorial/
http://websystique.com/spring-security/spring-security-4-hello-world-annotation-xml-example/
http://websystique.com/springmvc/springmvc-hibernate-many-to-many-example-annotation-using-join-table/
http://docs.spring.io/spring-security/site/docs/3.0.x/reference/ns-config.html#ns-getting-started
http://www.baeldung.com/spring-security-logout
http://stackoverflow.com/questions/3696680/howto-implement-spring-security-user-authorities-with-hibernate-jpa2
http://www.mkyong.com/spring-security/spring-security-form-login-using-database/

[Implementar REGRAS de negócio]
Definir e validar a chave de negócio para um registro de TaxRule, para que possa retornar sempre uma só linha de regra de imposto. 
Implementar Origem do Produto

[Implementar cache]
Ex: UFs, quase nunca mudam, poderia estar em cache e só mudar o save/delete da AddressState;
https://developer.jboss.org/wiki/ConfigureEhcacheasaSecondLevelCache
http://www.codingpedia.org/ama/spring-caching-with-ehcache/
http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html
https://en.wikibooks.org/wiki/Java_Persistence/Caching
http://blog.caelum.com.br/os-7-habitos-dos-desenvolvedores-hibernate-e-jpa-altamente-eficazes/
http://www.ehcache.org/
https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/performance-cache.html
Ver Query Cache do Hibernate.

<!-- EHCACHE -->
	<dependency>
	  <groupId>net.sf.ehcache</groupId>
	  <artifactId>ehcache</artifactId>
	  <version>${ehcache.version}</version>
	</dependency>	

[Criar paginação de dados]
VER: https://www.youtube.com/watch?v=RRuq563ozhY
	 http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa
	 JpaRepository / PagingAndSortingRepository
PagedListHolder pg = new PagedListHolder(service.getAll());
int pageNum = ServletReequestUtils.getIntParameter(request, "p", 0);
pg.setPage(pageNum); 
pg.setPageSize(4);
modelMap.put("pagedListHolder", pg);

[JPA2 Query]
http://www.ibm.com/developerworks/library/j-typesafejpa/
http://blog.werneckpaiva.com.br/2012/01/queries-com-a-nova-jpa2-criteria-api/
https://docs.oracle.com/cd/E19798-01/821-1841/gjitv/index.html
http://www.programcreek.com/java-api-examples/index.php?api=javax.persistence.metamodel.SetAttribute
https://en.wikibooks.org/wiki/Java_Persistence/OneToMany
https://en.wikibooks.org/wiki/Java_Persistence/Identity_and_Sequencing#Primary_Keys_through_OneToOne_and_ManyToOne_Relationships
http://www.mkyong.com/hibernate/hibernate-one-to-one-relationship-example-annotation/
http://justonjava.blogspot.com.br/2010/09/lazy-one-to-one-and-one-to-many.html
http://www.mkyong.com/hibernate/hibernate-one-to-one-relationship-example-annotation/

[JSON]
https://github.com/FasterXML/jackson-annotations

[Criar views]
das entidades internas (Ex: ICMSType)

[Bootstrap TABs]
http://codepen.io/wizly/pen/BlKxo/

[Bootstrap Panels]
http://www.bootply.com/HkDlNIKv9g
http://www.bootply.com/98827

[TESTS]
http://arquillian.org/guides/testing_java_persistence/
http://www.devmedia.com.br/junit-implementando-testes-unitarios-em-java-parte-i/1432
http://www.devmedia.com.br/junit-implementando-testes-unitarios-em-java-parte-ii/1549
http://uaihebert.com/tdd-com-hsqldb-jpa-e-hibernate/
LER XML do Spring
http://www.java2s.com/Tutorials/Java/JPA/0140__JPA_Column_Precision_Scale.htm

[JPA JOIN INFO]
@PrimaryKeyJoinColumn – essa anotação indica ao JPA que, para encontrar um objeto User basta procurar um registro com o mesmo ID do Customer. Ou seja, indica que um User vai ter o mesmo ID que seu Customer.

[SPRING Customizar Leitura Boolean]
http://springdiaries.blogspot.com.br/2011/05/binding-boolean-properties-in-spring.html

[SPRING MESSAGES]
http://www.javablog.fr/spring-internationalization-with-message-source.html

[CASCADE INFO]
Tipo	Ação	Disparado por
CascadeType.DETACH	|Quando uma entidade for retirada do Persistence Context (o que provoca que ela esteja detached) essa ação será refletida nos relacionamentos.	|Persistence Context finalizado ou por comando específico: entityManager.detach(), entityManager.clear().
CascadeType.MERGE	|Quando uma entidade tiver alguma informação alterada (update) essa ação será refletida nos relacionamentos.			|Quando a entidade for alterada e a transação finalizada ou por comando específico: entityManager.merge().
CascadeType.PERSIST	|Quando uma entidade for nova e inserida no banco de dados essa ação será refletida nos relacionamentos.				|Quando uma transação finalizada ou por comando específico: entityManager.persist().
CascadeType.REFRESH	|Quando uma entidade tiver seus dados sincronizados com o banco de dados essa ação será refletida nos relacionamentos.	|Por comando específico: entityManager.refresh().
CascadeType.REMOVE	|Quando uma entidade for removida (apagada) do banco de dados essa ação será refletida nos relacionamentos.				|Por comando específico: entityManager.remove().
CascadeType.ALL		|Quando qualquer ação citada acima for invocada pelo JPA ou por comando, essa ação será refletida no objeto.			|Por qualquer ação ou comando listado acima.

[TFS Visual Studio Online Plugin]
https://msdn.microsoft.com/pt-br/library/hh301122(v=vs.120).aspx
http://dl.microsoft.com/eclipse/tfs

-------------------------------------------------------------------------------------
-- CARGAS
-- -- -- -- select 'drop table '+ name from sys.tables where name like 'APP_%' order by modify_date desc;
-- -- APP_Company
DECLARE @IdCompany BIGINT = (SELECT TOP 1 Id FROM APP_Company WHERE NAME = 'EMP_LIXO');
if ISNULL(@IdCompany, 0) <= 0
BEGIN
    BEGIN TRAN
    SELECT @IdCompany = ISNULL(next_val, 0) + 1 from SEQ_PK_Company;
    INSERT INTO APP_Company (id, name) VALUES (@IdCompany, 'EMP_LIXO');
    UPDATE SEQ_PK_Company set next_val = @IdCompany;
    
    insert into APP_TransactionType (Id, Name, IsOut, CompanyId) VALUES (4, 'TST:Vendas', 1, @IdCompany), (5, 'TST:Compra', 0, @IdCompany)
    update SEQ_PK_TransactionType set next_val = (select MAX(id) +1 from APP_TransactionType);

    COMMIT;
    --ROLLBACK;
    SET @IdCompany = 0;
END

SELECT @IdCompany = (SELECT TOP 1 Id FROM APP_Company WHERE NAME = 'MASTER');
if ISNULL(@IdCompany, 0) <= 0
BEGIN
    BEGIN TRAN
    SELECT @IdCompany = ISNULL(next_val, 0) + 1 from SEQ_PK_Company;
    INSERT INTO APP_Company (id, name) VALUES (@IdCompany, 'MASTER');
    UPDATE SEQ_PK_Company set next_val = @IdCompany;
    COMMIT;
    --ROLLBACK;
END

-- -- APP_APPUSERs
IF NOT EXISTS (Select TOP 1 1 FROM APP_APPUSERs WHERE email='master@test.com')
BEGIN
    BEGIN TRAN
    UPDATE SEQ_PK_AppUsers SET next_val = ISNULL(next_val, 0) + 1;    
    DECLARE @UserID int = (SELECT next_val from SEQ_PK_AppUsers);
    INSERT INTO APP_APPUSERs (Id, Email, Name, CompanyID, Active, Password)
    SELECT  @UserID, 'master@test.com', 'Master', Id, 1, 'eb0a191797624dd3a48fa681d3061212'
    FROM    APP_COMPANY    
    WHERE   Name = 'MASTER';    
    
    UPDATE SEQ_PK_AppUserRole SET next_val = ISNULL(next_val, 0) + 3;
    DECLARE @RoleID int = (SELECT next_val -1 from SEQ_PK_AppUserRole);
    INSERT INTO APP_AppUserRole (Id, name, UserId) VALUES (@RoleID, 'ROLE_ADMIN', @UserID)
    INSERT INTO APP_AppUserRole (Id, name, UserId) VALUES (@RoleID+1, 'ROLE_USER', @UserID)
    INSERT INTO APP_AppUserRole (Id, name, UserId) VALUES (@RoleID+2, 'ROLE_REST_USER', @UserID)    
    COMMIT;
END;

-- -- APP_AddressState
-- DELETE APP_AddressState;
INSERT INTO APP_AddressState VALUES
('BR', 'Brasil', 1), ('EX', 'Exterior', 1), ('AC', 'Acre', 0), 
('AL', 'Alagoas', 0), ('AP', 'Amapá', 0), ('AM', 'Amazonas', 0),
('BA', 'Bahia', 0), ('CE', 'Ceará', 0), ('DF', 'Distrito Federal', 0),
('ES', 'Espírito Santo', 0), ('GO', 'Goiás', 0), ('MA', 'Maranhão', 0),
('MT', 'Mato Grosso', 0), ('MS', 'Mato Grosso do Sul', 0), ('MG', 'Minas Gerais', 0),
('PA', 'Pará', 0), ('PB', 'Paraíba', 0), ('PR', 'Paraná', 0), ('PE', 'Pernambuco', 0),
('PI', 'Piauí', 0), ('RJ', 'Rio de Janeiro', 0), ('RN', 'Rio Grande do Norte', 0), 
('RS', 'Rio Grande do Sul', 0), ('RO', 'Rondônia', 0), ('RR', 'Roraima', 0),
('SC', 'Santa Catarina', 0), ('SP', 'São Paulo', 0), ('SE', 'Sergipe', 0),
('TO', 'Tocantins', 0);


-- -- APP_PISCOFINSCST
-- DELETE APP_PISCOFINSCST
INSERT INTO APP_PISCOFINSCST (CST, [Description], IsTaxed) VALUES 
('01', 'Operação Tributável com Alíquota Básica', 1), ('02', 'Operação Tributável com Alíquota Diferenciada', 1), 
('03', 'Operação Tributável com Alíquota por Unidade de Medida de Produto', 1), ('04', 'Operação Tributável Monofásica - Revenda a Alíquota Zero', 1), 
('05', 'Operação Tributável por Substituição Tributária', 1), ('06', 'Operação Tributável a Alíquota Zero', 1), 
('07', 'Operação Isenta da Contribuição', 0), ('08', 'Operação sem Incidência da Contribuição', 0), 
('09', 'Operação com Suspensão da Contribuição', 0), ('49', 'Outras Operações de Saída', 0), 
('50', 'Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Tributada no Mercado Interno', 1), 
('51', 'Operação com Direito a Crédito – Vinculada Exclusivamente a Receita Não Tributada no Mercado Interno', 1), 
('52', 'Operação com Direito a Crédito - Vinculada Exclusivamente a Receita de Exportação', 1), 
('53', 'Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno', 1), 
('54', 'Operação com Direito a Crédito - Vinculada a Receitas Tributadas no Mercado Interno e de Exportação', 1), 
('55', 'Operação com Direito a Crédito - Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação', 1), 
('56', 'Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação', 1), 
('60', 'Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Tributada no Mercado Interno', 1), 
('61', 'Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno', 1), 
('62', 'Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita de Exportação', 1), 
('63', 'Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno', 1), 
('64', 'Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas no Mercado Interno e de Exportação', 1), 
('65', 'Crédito Presumido - Operação de Aquisição Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação', 1), 
('66', 'Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação', 1), 
('67', 'Crédito Presumido - Outras Operações', 0), ('70', 'Operação de Aquisição sem Direito a Crédito', 0), 
('71', 'Operação de Aquisição com Isenção', 0), ('72', 'Operação de Aquisição com Suspensão', 0), 
('73', 'Operação de Aquisição a Alíquota Zero', 1), ('74', 'Operação de Aquisição sem Incidência da Contribuição', 0), 
('75', 'Operação de Aquisição por Substituição Tributária', 0), ('98', 'Outras Operações de Entrada', 0), ('99', 'Outras Operações', 0)
;

-- -- APP_ICMSCST
-- DELETE APP_ICMSType;
INSERT INTO APP_ICMSType (Id, IsTaxed, HasReduction, IsST, IsSTTaxed, Name) VALUES 
(1, 1, 0, 0, 0, 'Tributado'), 
(2, 1, 0, 1, 1, 'Tributado ST'), 
(3, 1, 1, 0, 0, 'Redução de Base'), 
(4, 1, 1, 1, 1, 'Redução de Base ST'), 
(5, 0, 0, 1, 1, 'Isento com cobrança de ST'), 
(6, 0, 0, 0, 0, 'Isento ou Não Tributado'), 
(7, 0, 0, 1, 0, 'Isento ou Não Tributado ST');
update SEQ_PK_ICMSType set next_val = (select MAX(id) +1 from APP_ICMSType);

--- -- APP_ICMSCST
-- DELETE APP_ICMSCST;
INSERT INTO APP_ICMSCST (CST, [Description], ICMSTypeId) VALUES 
('00', 'Tributada integralmente', 1), 
('10', 'Tributada e com cobrança do ICMS por substituição tributária', 2), 
('20', 'Com redução de base de cálculo', 3), 
('30', 'Isenta ou não tributada e com cobrança do ICMS por substituição tributária', 5), 
('40', 'Isenta', 6),  ('41', 'Não tributada', 6),  ('50', 'Suspensão', 6), ('51', 'Diferimento', 6), 
('60', 'ICMS cobrado anteriormente por substituição tributária', 7), 
('70', 'Com redução de base de cálculo e cobrança do ICMS por substituição tributária', 4), 
('90', 'Outras', 6);


-- -- TransactionType
-- delete APP_TransactionType;
declare @TransTypeCOId BIGINT = (SELECT Id from APP_Company Where Name = 'MASTER');
insert into APP_TransactionType (Id, Name, IsOut, CompanyId) VALUES (1, 'Vendas', 1, @TransTypeCOId), (2, 'Compra para Revenda', 0, @TransTypeCOId), (3, 'Devolução de Venda', 0, @TransTypeCOId)
update SEQ_PK_TransactionType set next_val = (select MAX(id) +1 from APP_TransactionType);

-- -- PersonType
-- delete APP_PersonType;
declare @PersonTypeCOId BIGINT = (SELECT Id from APP_Company Where Name = 'MASTER');
insert into APP_PersonType (Id, Name, IsActive, CompanyId) VALUES (1, 'Distribuidor', 1, @PersonTypeCOId), (2, 'Optante pelo simples nacional', 1, @PersonTypeCOId)
update SEQ_PK_PersonType set next_val = (select MAX(id) +1 from APP_PersonType);

-- -- Operation
-- delete APP_Operation;
declare @OperCOId BIGINT = (SELECT Id from APP_Company Where Name = 'MASTER');
insert into APP_Operation (Id, Name, IsActive, TransactionTypeId, CompanyId) VALUES 
(1, 'Venda à vista', 1, 1, @OperCOId), (2, 'Venda à prazo', 1, 1, @OperCOId), (3, 'Devolução de vendas', 1, 3, @OperCOId) ;
update SEQ_PK_Operation set next_val = (select MAX(id) +1 from APP_Operation);

-- -- TaxRule
if object_id('tempdb..#Dados') is not null
	DROP TABLE #Dados;
-- DELETE APP_TaxRule;

declare @TaxCOId BIGINT = (SELECT Id from APP_Company Where Name = 'MASTER');
Select 
    IDENTITY(INT, 1, 1) Id, '' CEST, 0 ExNCM, '' NCM, 1 IsActive, 0 ItemId, 
    Id FromStateId, NULL OperationId, NULL PersonTypeId, Id ToStateId, NULL TransactionTypeId, @TaxCOId as CompanyId  
INTO #Dados
FROM  APP_AddressState;

INSERT INTO APP_TaxRule (Id, CEST, ExNCM, NCM, IsActive, ItemId, FromStateId, OperationId, PersonTypeId, ToStateId, TransactionTypeId, CompanyId)
SELECT * FROM #Dados;
update SEQ_PK_TaxRule set next_val = (select MAX(id) +1 from APP_TaxRule);


-------------------------------------------------------------------------------------
-- QUERIES
-- -- LogView
create view viwAppEntityLog as
SELECT  Top (1000000) l.id, l.LogDate, 
        CASE l.LogType 
            WHEN 1 THEN 'Inclusão'
            WHEN 2 THEN 'Alteração'
            WHEN 3 THEN 'Exclusão'
        END as LogType, 
        e.EntityName, l.EntityIdValue, u.Name as UserName
FROM    APP_AppEntityLog l
JOIN    APP_AppUsers u          on u.Id = l.UserId
JOIN    APP_AppLogEntityId e    on e.Id = l.EntityId
ORDER BY l.Id DESC;

-------------------------------------------------------------------------------------
