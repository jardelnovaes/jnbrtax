<%@ taglib uri="http://www.springframework.org/tags" prefix="s"%>
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="security"%>



WebConten/META-INF/persistence.xml (ver tbm resources/META-INF/persistence.xml)
	Classes Entity
	Regras Hibernate (ou outro JPA)
	

Classes DAO (ou AbstractDAO)
    private EntityManagerFactory factory;
    private EntityManager entityManager; //opcional
	
    @PersistenceUnit
	public void setEntityManagerFactory(EntityManagerFactory factory) {
		this.factory = factory;
	}
	
App-servlet.xml (Ex: MvcSpring02-servlet.xml)
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	bean DataSource
	bean entityManagerFactory (para JPA ou outros para por exemplo Hibernate)
	bean transactionManager para controle de transação
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	bean 1 para cada DAO ex: appUserDAO
		ou para scannear todos usar:
		<context:component-scan base-package="br.com.salfer.java.mvc.spring.dao">
	        <context:include-filter type="annotation"
	            expression="org.springframework.stereotype.Repository" />
	    </context:component-scan>
	    
	    
	bean 1 para cada Service
	
Controller
	@Autowired
	@Qualifier("appUserService")
	private AppUserService service;	
	
Service
	@Autowired
	private AppUserDAO dao;
	
	
CSS/JS
	Criar pasta em WEB-INF/resources
	Colocar rescursos lá
	no JSP usar (exemplo): <link href="<c:url value="/resources/css/site.css" />" rel="stylesheet" type="text/css" />
JSP
	<c:set var="structureId" value="< % =article.getStructureId()% > " scope="request"></c:set>
	<c:if test="${not empty successMsg}">
	<c:choose>
		<c:when test="${not empty cseList.ftDtClo}">
			<c:out value="${cseList.ftDtClo}"/>
		</c:when>
	</c:choose>	
JSP/TAGs 
	em WEB-INF/tags criar arquivo de template .tag	
	na pagina usar
	<%@ taglib tagdir="/WEB-INF/tags" prefix="tags" %>
	...
	<tags:simplePage title="App Users">
		conteudo interno da pagina
	</tags:simplePage>